{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\nexport class TokenStorageService {\n  constructor() {\n    this.roles = [];\n  }\n  signOut() {\n    window.sessionStorage.clear();\n  }\n  saveToken(token) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n  getToken() {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n  saveUsername(username) {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, username);\n  }\n  getUsername() {\n    return sessionStorage.getItem(USERNAME_KEY);\n  }\n  saveAuthorities(authorities) {\n    console.log('saveAuthorities');\n    console.log(authorities);\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n  }\n  getAuthorities() {\n    this.roles = [];\n    if (sessionStorage.getItem(TOKEN_KEY)) {\n      console.log('test');\n      console.log(sessionStorage.getItem(AUTHORITIES_KEY));\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)).forEach(authority => {\n        this.roles.push(authority);\n      });\n    }\n    return this.roles;\n  }\n}\nTokenStorageService.ɵfac = function TokenStorageService_Factory(t) {\n  return new (t || TokenStorageService)();\n};\nTokenStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenStorageService,\n  factory: TokenStorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,MAAMA,SAAS,GAAG,WAAW;AAC7B,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,eAAe,GAAG,iBAAiB;AAKzC,OAAM,MAAOC,mBAAmB;EAE9BC;IADQ,UAAK,GAAkB,EAAE;EACjB;EAEhBC,OAAO;IACLC,MAAM,CAACC,cAAc,CAACC,KAAK,EAAE;EAC/B;EAEOC,SAAS,CAACC,KAAa;IAC5BJ,MAAM,CAACC,cAAc,CAACI,UAAU,CAACX,SAAS,CAAC;IAC3CM,MAAM,CAACC,cAAc,CAACK,OAAO,CAACZ,SAAS,EAAEU,KAAK,CAAC;EACjD;EAEOG,QAAQ;IACb,OAAON,cAAc,CAACO,OAAO,CAACd,SAAS,CAAC;EAC1C;EAEOe,YAAY,CAACC,QAAgB;IAClCV,MAAM,CAACC,cAAc,CAACI,UAAU,CAACV,YAAY,CAAC;IAC9CK,MAAM,CAACC,cAAc,CAACK,OAAO,CAACX,YAAY,EAAEe,QAAQ,CAAC;EACvD;EAEOC,WAAW;IAChB,OAAOV,cAAc,CAACO,OAAO,CAACb,YAAY,CAAC;EAC7C;EAEOiB,eAAe,CAACC,WAAqB;IAC1CC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxBb,MAAM,CAACC,cAAc,CAACI,UAAU,CAACT,eAAe,CAAC;IACjDI,MAAM,CAACC,cAAc,CAACK,OAAO,CAACV,eAAe,EAAEoB,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAAC;EAC7E;EAEOK,cAAc;IACnB,IAAI,CAACC,KAAK,GAAG,EAAE;IAEf,IAAIlB,cAAc,CAACO,OAAO,CAACd,SAAS,CAAC,EAAE;MACrCoB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAACd,cAAc,CAACO,OAAO,CAACZ,eAAe,CAAC,CAAC;MACpDoB,IAAI,CAACI,KAAK,CAACnB,cAAc,CAACO,OAAO,CAACZ,eAAe,CAAC,CAAC,CAACyB,OAAO,CAACC,SAAS,IAAG;QACtE,IAAI,CAACH,KAAK,CAACI,IAAI,CAACD,SAAS,CAAC;MAC5B,CAAC,CAAC;;IAGJ,OAAO,IAAI,CAACH,KAAK;EACnB;;AA7CWtB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA2B,SAAnB3B,mBAAmB;EAAA4B,YAFlB;AAAM","names":["TOKEN_KEY","USERNAME_KEY","AUTHORITIES_KEY","TokenStorageService","constructor","signOut","window","sessionStorage","clear","saveToken","token","removeItem","setItem","getToken","getItem","saveUsername","username","getUsername","saveAuthorities","authorities","console","log","JSON","stringify","getAuthorities","roles","parse","forEach","authority","push","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ThinkPad\\Desktop\\front_app\\src\\app\\auth\\token-storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'AuthToken';\nconst USERNAME_KEY = 'AuthUsername';\nconst AUTHORITIES_KEY = 'AuthAuthorities';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n  private roles: Array<string> = [];\n  constructor() { }\n\n  signOut() {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string) {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string {\n    return sessionStorage.getItem(TOKEN_KEY);\n  }\n\n  public saveUsername(username: string) {\n    window.sessionStorage.removeItem(USERNAME_KEY);\n    window.sessionStorage.setItem(USERNAME_KEY, username);\n  }\n\n  public getUsername(): string {\n    return sessionStorage.getItem(USERNAME_KEY);\n  }\n\n  public saveAuthorities(authorities: string[]) {\n    console.log('saveAuthorities');\n    console.log(authorities);\n    window.sessionStorage.removeItem(AUTHORITIES_KEY);\n    window.sessionStorage.setItem(AUTHORITIES_KEY, JSON.stringify(authorities));\n  }\n\n  public getAuthorities(): string[] {\n    this.roles = [];\n\n    if (sessionStorage.getItem(TOKEN_KEY)) {\n      console.log('test');\n      console.log(sessionStorage.getItem(AUTHORITIES_KEY));\n      JSON.parse(sessionStorage.getItem(AUTHORITIES_KEY)).forEach(authority => {\n        this.roles.push(authority);\n      });\n    }\n\n    return this.roles;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}